#!/usr/bin/env python3
"""
Script d'analyse de la qualit√© des donn√©es GOLD
- V√©rifie les agr√©gations DVF et DPE
- Analyse la distribution des indicateurs
- Valide la structure des donn√©es
"""

import logging
import pandas as pd
import boto3
import pyarrow.dataset as ds
import pyarrow.fs as pafs

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_gold_quality():
    """Analyse la qualit√© des donn√©es GOLD"""
    logger.info("üîç ANALYSE QUALIT√â DONN√âES GOLD")
    logger.info("=" * 60)
    
    try:
        # Connexion MinIO
        pa_fs = pafs.S3FileSystem(
            endpoint_override='http://minio:9000',
            access_key='admin',
            secret_key='password123',
            scheme='http'
        )
        
        # Charger les donn√©es GOLD
        logger.info("üìñ Chargement des donn√©es GOLD...")
        # Lire le fichier complet au lieu du dataset partitionn√©
        gold_file = "datalake-gold/market_indicators/gold_complete.parquet"
        gold_df = pd.read_parquet(gold_file, filesystem=pa_fs)
        
        logger.info(f"üìä GOLD: {len(gold_df):,} lignes")
        logger.info(f"üè∑Ô∏è Colonnes: {list(gold_df.columns)}")
        
        # 1. V√©rification de la structure
        logger.info("\nüèóÔ∏è V√âRIFICATION STRUCTURE")
        logger.info("=" * 40)
        
        # Colonnes attendues
        expected_cols = [
            'departement', 'annee', 'trimestre', 'nb_ventes', 
            'prix_m2_median', 'prix_m2_mean', 'dpe_total'
        ]
        
        missing_cols = [col for col in expected_cols if col not in gold_df.columns]
        if missing_cols:
            logger.warning(f"‚ö†Ô∏è Colonnes manquantes: {missing_cols}")
        else:
            logger.info("‚úÖ Toutes les colonnes attendues sont pr√©sentes")
        
        # 2. Analyse des d√©partements
        logger.info("\nüó∫Ô∏è ANALYSE D√âPARTEMENTS")
        logger.info("=" * 40)
        
        deps = gold_df['departement'].unique()
        logger.info(f"D√©partements: {sorted(deps)}")
        
        for dept in sorted(deps):
            dept_data = gold_df[gold_df['departement'] == dept]
            logger.info(f"  {dept}: {len(dept_data)} lignes")
        
        # 3. Analyse temporelle
        logger.info("\nüìÖ ANALYSE TEMPORELLE")
        logger.info("=" * 40)
        
        trimestres = gold_df['trimestre'].unique()
        logger.info(f"Trimestres: {sorted(trimestres)}")
        
        annees = gold_df['annee'].unique()
        logger.info(f"Ann√©es: {sorted(annees)}")
        
        # 4. Analyse des m√©triques DVF
        logger.info("\nüí∞ ANALYSE M√âTRIQUES DVF")
        logger.info("=" * 40)
        
        if 'nb_ventes' in gold_df.columns:
            logger.info(f"Nombre de ventes:")
            logger.info(f"  Min: {gold_df['nb_ventes'].min():,}")
            logger.info(f"  Max: {gold_df['nb_ventes'].max():,}")
            logger.info(f"  Moyenne: {gold_df['nb_ventes'].mean():.0f}")
            logger.info(f"  Total: {gold_df['nb_ventes'].sum():,}")
        
        if 'prix_m2_median' in gold_df.columns:
            logger.info(f"Prix/m¬≤ m√©dian:")
            logger.info(f"  Min: {gold_df['prix_m2_median'].min():,} ‚Ç¨")
            logger.info(f"  Max: {gold_df['prix_m2_median'].max():,} ‚Ç¨")
            logger.info(f"  Moyenne: {gold_df['prix_m2_median'].mean():.0f} ‚Ç¨")
        
        if 'prix_m2_mean' in gold_df.columns:
            logger.info(f"Prix/m¬≤ moyen:")
            logger.info(f"  Min: {gold_df['prix_m2_mean'].min():,} ‚Ç¨")
            logger.info(f"  Max: {gold_df['prix_m2_mean'].max():,} ‚Ç¨")
            logger.info(f"  Moyenne: {gold_df['prix_m2_mean'].mean():.0f} ‚Ç¨")
        
        # 5. Analyse des m√©triques DPE
        logger.info("\nüè∑Ô∏è ANALYSE M√âTRIQUES DPE")
        logger.info("=" * 40)
        
        # Colonnes DPE
        dpe_cols = [col for col in gold_df.columns if col.startswith('classe_')]
        logger.info(f"Colonnes DPE: {dpe_cols}")
        
        if 'dpe_total' in gold_df.columns:
            logger.info(f"Total DPE:")
            logger.info(f"  Min: {gold_df['dpe_total'].min():,}")
            logger.info(f"  Max: {gold_df['dpe_total'].max():,}")
            logger.info(f"  Moyenne: {gold_df['dpe_total'].mean():.0f}")
            logger.info(f"  Total global: {gold_df['dpe_total'].sum():,}")
        
        # 6. V√©rification de la coh√©rence
        logger.info("\nüîç V√âRIFICATION COH√âRENCE")
        logger.info("=" * 40)
        
        # V√©rifier que chaque d√©partement a des donn√©es pour chaque trimestre
        for dept in sorted(deps):
            dept_data = gold_df[gold_df['departement'] == dept]
            dept_trimestres = dept_data['trimestre'].unique()
            logger.info(f"  {dept}: {len(dept_trimestres)} trimestres sur {len(trimestres)} attendus")
            
            if len(dept_trimestres) < len(trimestres):
                missing = set(trimestres) - set(dept_trimestres)
                logger.warning(f"    ‚ö†Ô∏è Trimestres manquants: {sorted(missing)}")
        
        # 7. Exemples de donn√©es
        logger.info("\nüìã EXEMPLES DE DONN√âES")
        logger.info("=" * 40)
        
        sample = gold_df.head(3)
        for idx, row in sample.iterrows():
            logger.info(f"  Ligne {idx}:")
            logger.info(f"    D√©partement: {row['departement']}")
            logger.info(f"    Trimestre: {row['trimestre']}")
            if 'nb_ventes' in row:
                logger.info(f"    Ventes: {row['nb_ventes']:,}")
            if 'prix_m2_median' in row:
                logger.info(f"    Prix/m¬≤ m√©dian: {row['prix_m2_median']:,} ‚Ç¨")
            if 'dpe_total' in row:
                logger.info(f"    Total DPE: {row['dpe_total']:,}")
        
        logger.info("\n‚úÖ ANALYSE GOLD TERMIN√âE")
        return gold_df
        
    except Exception as e:
        logger.error(f"‚ùå Erreur analyse GOLD: {e}")
        return None

if __name__ == "__main__":
    analyze_gold_quality()
